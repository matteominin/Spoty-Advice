import { SearchItemInterface } from "./playlist.interface";
import { isExpired, refreshAccessToken } from "../utils/auth";

export const isPlaylistNameDuplicate = async (name: string) => {
    if (!name) return true
    const playlists: Array<string> = []
    let next = ""

    if (isExpired()) {
        refreshAccessToken(localStorage.getItem('refresh_token') as string)
    }

    do {
        try {
            const res = await fetch(`https://api.spotify.com/v1/me/playlists?limit=50`, {
                method: 'GET',
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('access_token')}`,
                }
            })

            if (res.status === 401) throw new Error('Unauthorized');
            if (!res.ok) throw new Error('Error getting playlists');

            const data = await res.json();
            data.items.forEach((playlist: SearchItemInterface) => {
                playlists.push(playlist.name.toLowerCase())
            });

            next = data.next

        } catch (error: any) {
            throw new Error(error.message || "Unexpected error");
        }
    } while (next)

    return playlists.includes(name.toLowerCase());
}

export const createPlaylist = async (playlist_name: string) => {
    const access_token = localStorage.getItem('access_token');
    if (!access_token) throw new Error('No access token found');
    if (isExpired()) {
        refreshAccessToken(localStorage.getItem('refresh_token') as string)
    }
    try {
        const res = await fetch(`https://api.spotify.com/v1/me/playlists`, {
            method: 'POST',
            headers: {
                Authorization: `Bearer ${access_token}`,
            },
            body: JSON.stringify({
                name: playlist_name,
                description: "Playlist generated by Music Advice"
            })
        })

        if (res.status === 401) throw new Error('Unauthorized');
        if (!res.ok) throw new Error('Error creating playlist');

        const data = await res.json();
        return data.id;
    } catch (error: any) {
        throw new Error(error.message || "Unexpected error");
    }
}

export const addTracksToPlaylist = async (playlist_id: string, songList: Array<any>) => {
    if (isExpired()) {
        refreshAccessToken(localStorage.getItem('refresh_token') as string)
    }
    try {
        const res = await fetch(`https://api.spotify.com/v1/playlists/${playlist_id}/tracks`, {
            method: 'POST',
            headers: {
                Authorization: `Bearer ${localStorage.getItem('access_token')}`,
            },
            body: JSON.stringify({
                uris: songList
            })
        })

        if (res.status == 401) throw new Error('Unauthorized');
        if (!res.ok) throw new Error('Error adding tracks to playlist');

        const data = await res.json();
        return !!data.snapshot_id;
    } catch (error: any) {
        throw new Error(error.message || "Unexpected error");
    }
}

export const addToFavorite = async (trackList: Array<string>) => {
    if (isExpired()) {
        refreshAccessToken(localStorage.getItem('refresh_token') as string)
    }
    try {
        const res = await fetch(`https://api.spotify.com/v1/me/tracks`, {
            method: 'PUT',
            headers: {
                Authorization: `Bearer ${localStorage.getItem('access_token')}`,
            },
            body: JSON.stringify({
                ids: trackList
            })
        })

        if (res.status == 401) throw new Error('Unauthorized');
        if (!res.ok) throw new Error('Error adding tracks to playlist');

        return true
    } catch (error: any) {
        throw new Error(error.message || "Unexpected error");
    }
}